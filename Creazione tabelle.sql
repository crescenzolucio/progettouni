CREATE TABLE PAESI(
	ID_PAESE  VARCHAR(3) PRIMARY KEY,
	PAESE VARCHAR(30) UNIQUE
);

CREATE TABLE SISTEMI_AUDIO(
	ID_SOUND  VARCHAR(4) PRIMARY KEY,
	ANNO VARCHAR(4),
	AUDIO VARCHAR(50) UNIQUE
);

CREATE TABLE TECNOLOGIE_PROIEZIONE(
	ID_TEC  VARCHAR(4) PRIMARY KEY,
	ANNO VARCHAR(4),
	TECNOLOGIA VARCHAR(50) UNIQUE
);

CREATE TABLE GENERI(
	ID_GENERE  VARCHAR(2) PRIMARY KEY,
	GENERE VARCHAR(20) UNIQUE
);

CREATE TABLE ATTORI(
	ID_ATTORE VARCHAR(6) PRIMARY KEY,
	NOMINATIVO VARCHAR(50) NOT NULL,
	PAESE_DI_ORIGINE VARCHAR(30) NOT NULL,
	DATA_NASCITA DATE NOT NULL,
	
	CONSTRAINT DATA_NASCITA_CONCORDE CHECK (DATA_NASCITA < CURRENT_DATE)
);

CREATE TABLE REGISTI(
	ID_REGISTA VARCHAR(6) PRIMARY KEY,
	NOMINATIVO VARCHAR(50) NOT NULL,
	PAESE_DI_ORIGINE VARCHAR(20) NOT NULL,
	DATA_NASCITA DATE NOT NULL,
	
	CONSTRAINT DATA_NASCITA_CONCORDE CHECK (DATA_NASCITA < CURRENT_DATE)
);

CREATE TABLE FILM(
	ID_FILM VARCHAR(6) PRIMARY KEY,
	TITOLO VARCHAR(50) NOT NULL,
	ANNO_PRODUZIONE VARCHAR(4) NOT NULL,
	ID_REGISTA VARCHAR(6),
	DURATAMIN SMALLINT NOT NULL ,
	
	CONSTRAINT CHECKDURATAMAX CHECK (DURATAMIN BETWEEN 1 AND 1440),
	CONSTRAINT CHECKANNO  CHECK  (CAST(ANNO_PRODUZIONE AS INTEGER) BETWEEN 1895 AND DATE_PART('YEAR', CURRENT_DATE)),
	CONSTRAINT FK_REGISTA FOREIGN KEY(ID_REGISTA) REFERENCES REGISTI(ID_REGISTA) 
);

CREATE TABLE ATTORI_FILM(
	ID_ATTORE VARCHAR(6),
	ID_FILM  VARCHAR(8),
	
	CONSTRAINT FK_ATTOREFILM FOREIGN KEY(ID_ATTORE) REFERENCES ATTORI(ID_ATTORE),
	CONSTRAINT FK_FILMATTORE FOREIGN KEY(ID_FILM) REFERENCES FILM(ID_FILM)
);


CREATE TABLE GENERE_FILM(
	ID_GENERE  VARCHAR(2) PRIMARY KEY,
	ID_FILM  VARCHAR(8),
	
	CONSTRAINT FK_GENEREFILM FOREIGN KEY(ID_GENERE) REFERENCES GENERI(ID_GENERE),
	CONSTRAINT FK_FILMGENERE FOREIGN KEY(ID_FILM) REFERENCES FILM(ID_FILM)
);


CREATE TABLE SALE(
	ID_SALA VARCHAR(3) PRIMARY KEY,
	DESCRIZIONE VARCHAR(20) NOT NULL,
	SISTEMA_AUDIO VARCHAR(4),
	TECNOLOGIA_PROIEZIONE VARCHAR(20),
	POSTI SMALLINT NOT NULL,
	
	CONSTRAINT CHECKPOSTIMAX CHECK (POSTI BETWEEN 1 AND 1000)
);

CREATE TABLE PROIEZIONI(
	ID_PROIEZIONE VARCHAR(8) PRIMARY KEY,
	ID_SALA VARCHAR(3),
	ID_FILM  VARCHAR(8),
	PREZZO DECIMAL NOT NULL,
	DATETIME_INIZIO_PROIEZIONE TIMESTAMP NOT NULL,
	DATETIME_FINE_PROIEZIONE TIMESTAMP NOT NULL,

	CONSTRAINT MAGGIORE_ZERO CHECK (PREZZO > 0 ),	
	CONSTRAINT FK_SALA FOREIGN KEY(ID_SALA) REFERENCES SALE(ID_SALA),
	CONSTRAINT FK_FILM FOREIGN KEY(ID_FILM) REFERENCES FILM(ID_FILM) ON DELETE CASCADE,
	CONSTRAINT ORARI_CONCORDI CHECK (DATETIME_INIZIO_PROIEZIONE < DATETIME_FINE_PROIEZIONE)
);

CREATE TABLE BIGLIETTI(
	ID_PROIEZIONE VARCHAR(8),
	ID_BIGLIETTO SERIAL PRIMARY KEY,
	SCONTO SMALLINT, 
	PREZZOFINALE DECIMAL NOT NULL,
	
	CONSTRAINT SCONTO_0_100 CHECK (SCONTO BETWEEN 0 AND 100),
	CONSTRAINT FK_PROIEZIONE FOREIGN KEY(ID_PROIEZIONE) REFERENCES PROIEZIONI(ID_PROIEZIONE) ON DELETE CASCADE
);



CREATE VIEW SPETTACOLI_RENUMERATIVI AS (
	SELECT (SELECT F.TITOLO FROM FILM F WHERE F.ID_FILM=P.ID_FILM)FILM,COUNT(B.ID_BIGLIETTO)BIGLIETTI_VENDUTI,SUM(B.PREZZOFINALE)GUADAGNO_TOTALE
	FROM BIGLIETTI B JOIN PROIEZIONI P 
	ON B.ID_PROIEZIONE=P.ID_PROIEZIONE
	GROUP BY FILM
);

CREATE VIEW ORARI_MAGGIORE_AFFLUENZA AS (
	SELECT COUNT(*)AFFLUENZA,CAST(DATETIME_INIZIO_PROIEZIONE as time)FASCIAINIZIO,CAST(DATETIME_FINE_PROIEZIONE as time)FASCIAFINE
	FROM BIGLIETTI B JOIN PROIEZIONI P 
	ON B.ID_PROIEZIONE=P.ID_PROIEZIONE
	GROUP BY FASCIAINIZIO,FASCIAFINE
	ORDER BY AFFLUENZA
);

CREATE VIEW AFFLUENZA_SALE_ORARI_MAX AS (
	SELECT	COUNT(*)CONTA,P.ID_SALA,CAST(P.DATETIME_INIZIO_PROIEZIONE as time)FASCIAINIZIO,CAST(P.DATETIME_FINE_PROIEZIONE as time)FASCIAFINE
	FROM BIGLIETTI B JOIN PROIEZIONI P
	ON B.ID_PROIEZIONE=P.ID_PROIEZIONE
	GROUP BY 2,3,4
	HAVING CAST(P.DATETIME_INIZIO_PROIEZIONE as time)||'-'||CAST(P.DATETIME_FINE_PROIEZIONE as time) in (SELECT O.FASCIAINIZIO||'-'||O.FASCIAFINE FROM ORARI_MAGGIORE_AFFLUENZA O WHERE O.AFFLUENZA=(SELECT MAX(O.AFFLUENZA) FROM ORARI_MAGGIORE_AFFLUENZA O))
);


/*TRIGGERS*/
/*CONTROLLO SALA*/
CREATE OR REPLACE FUNCTION  CONTROLLO_SALA_PIENA() 
RETURNS TRIGGER AS $$    
DECLARE
   POSTI_SALA INT;
   BIGLIETTI_VENDUTI INT;
BEGIN
	SELECT S.POSTI INTO POSTI_SALA FROM SALE S WHERE S.ID_SALA=(SELECT P.ID_SALA FROM PROIEZIONI P WHERE P.ID_PROIEZIONE=NEW.ID_PROIEZIONE);
	SELECT COUNT(*) INTO BIGLIETTI_VENDUTI FROM BIGLIETTI B WHERE B.ID_PROIEZIONE=NEW.ID_PROIEZIONE;
	IF (POSTI_SALA = BIGLIETTI_VENDUTI) THEN 
		RAISE EXCEPTION 'SALA PIENA';
	END IF;
	RETURN NEW;
END; 
$$ language plpgsql;



/*CONTROLLO PROIEZIONE*/
CREATE OR REPLACE FUNCTION CONTROLLO_SALA_FILM_ORARIO() 
RETURNS TRIGGER AS $$ 
DECLARE
   CONTA INT := 0;
   RIGA PROIEZIONI%ROWTYPE;
BEGIN
	FOR RIGA IN SELECT * FROM PROIEZIONI P 
	WHERE P.ID_SALA=NEW.ID_SALA AND 
		  (P.DATETIME_INIZIO_PROIEZIONE::DATE IN (P.DATETIME_INIZIO_PROIEZIONE::DATE,P.DATETIME_FINE_PROIEZIONE::DATE) OR
		  P.DATETIME_FINE_PROIEZIONE::DATE IN (P.DATETIME_INIZIO_PROIEZIONE::DATE,P.DATETIME_FINE_PROIEZIONE::DATE))
	LOOP
		IF((NEW.DATETIME_INIZIO_PROIEZIONE BETWEEN RIGA.DATETIME_INIZIO_PROIEZIONE AND RIGA.DATETIME_FINE_PROIEZIONE) 
		   OR (NEW.DATETIME_FINE_PROIEZIONE BETWEEN RIGA.DATETIME_INIZIO_PROIEZIONE AND RIGA.DATETIME_FINE_PROIEZIONE)) THEN
			CONTA := CONTA + 1;
		END IF;
		EXIT WHEN CONTA > 0;
	END LOOP;
	IF(CONTA > 0) THEN
		RAISE EXCEPTION 'SALA GIÃ€ OCCUPATA PER LA DATA E L''ORARIO INSERITO';
	END IF;
	RETURN NEW;
END; 
$$ language plpgsql;

CREATE TRIGGER SALA_PIENA
BEFORE INSERT
ON BIGLIETTI
FOR EACH ROW
EXECUTE FUNCTION CONTROLLO_SALA_PIENA();

CREATE TRIGGER PROIEZIONE_NON_POSSIBILE
BEFORE INSERT
ON PROIEZIONI
FOR EACH ROW
EXECUTE FUNCTION CONTROLLO_SALA_FILM_ORARIO();